{"ast":null,"code":"import { PROJECT_SKILLS, project_skills } from '../project/project-skills.function';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../project/project.service\";\nimport * as i2 from \"../navbar/navbar.component\";\nimport * as i3 from \"../footer/footer.component\";\nimport * as i4 from \"../portfolio-grid/portfolio-grid.component\";\nimport * as i5 from \"../filter/filter.component\";\nexport class PortfolioComponent {\n  constructor(projectService) {\n    this.projectService = projectService;\n    this.projects = [];\n    this.filters = PROJECT_SKILLS;\n    this.project_skills = project_skills;\n    this.filtered_projects = [];\n    this.selected_filters = [];\n  }\n  ngOnInit() {\n    this.getProjects();\n    this.filtered_projects = this.projects;\n  }\n  getProjects() {\n    this.projects = this.projectService.getProjects();\n  }\n  filter($event) {\n    let filtered_item = $event; //event emitted by filters component\n    console.log(filtered_item);\n    this.updateFilters(filtered_item);\n    this.updateFilteredProjects();\n  }\n  updateFilters(filtered_item) {\n    if (this.selected_filters.includes(filtered_item)) {\n      let index = this.selected_filters.indexOf(filtered_item);\n      this.selected_filters.splice(index, 1);\n    } else {\n      this.selected_filters.push(filtered_item);\n    }\n  }\n  getVisibleProjects() {\n    let visible_projects = this.project_skills.get(this.selected_filters[0]);\n    for (let i = 1; i < this.selected_filters.length; i++) {\n      let projects = this.project_skills.get(this.selected_filters[i]);\n      visible_projects = visible_projects.filter(element => projects.includes(element));\n    }\n    return visible_projects;\n  }\n  updateFilteredProjects() {\n    if (this.selected_filters.length == 0) {\n      this.filtered_projects = this.projects;\n    } else {\n      this.filtered_projects = [];\n      let projects = new Set(this.getVisibleProjects());\n      for (let i = 0; i < this.projects.length; i++) {\n        if (projects.has(this.projects[i].id)) {\n          this.filtered_projects.push(this.projects[i]);\n        }\n      }\n    }\n  }\n}\nPortfolioComponent.ɵfac = function PortfolioComponent_Factory(t) {\n  return new (t || PortfolioComponent)(i0.ɵɵdirectiveInject(i1.ProjectService));\n};\nPortfolioComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PortfolioComponent,\n  selectors: [[\"app-portfolio\"]],\n  decls: 6,\n  vars: 3,\n  consts: [[1, \"container-body\"], [1, \"container\", \"pt-5\"], [3, \"projects\", \"filters\", \"filter_item\"], [3, \"projects\"]],\n  template: function PortfolioComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"app-navbar\")(2, \"div\", 1);\n      i0.ɵɵelementStart(3, \"app-filter\", 2);\n      i0.ɵɵlistener(\"filter_item\", function PortfolioComponent_Template_app_filter_filter_item_3_listener($event) {\n        return ctx.filter($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"app-portfolio-grid\", 3)(5, \"app-footer\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"projects\", ctx.filtered_projects)(\"filters\", ctx.filters);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"projects\", ctx.filtered_projects);\n    }\n  },\n  dependencies: [i2.NavbarComponent, i3.FooterComponent, i4.PortfolioGridComponent, i5.FilterComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["PROJECT_SKILLS","project_skills","PortfolioComponent","constructor","projectService","ngOnInit","getProjects","filtered_projects","projects","filter","$event","filtered_item","console","log","updateFilters","updateFilteredProjects","selected_filters","includes","index","indexOf","splice","push","getVisibleProjects","visible_projects","get","i","length","element","Set","has","id","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["D:\\Projects\\WebDev\\airada\\airada.github.io\\airada\\src\\app\\portfolio\\portfolio.component.ts","D:\\Projects\\WebDev\\airada\\airada.github.io\\airada\\src\\app\\portfolio\\portfolio.component.html"],"sourcesContent":["import { Component, HostListener } from '@angular/core';\nimport { Project } from '../project/project';\nimport { ProjectService } from '../project/project.service';\nimport { PROJECT_SKILLS, project_skills } from '../project/project-skills.function';\n\n@Component({\n  selector: 'app-portfolio',\n  templateUrl: './portfolio.component.html',\n  styleUrls: ['./portfolio.component.css']\n})\nexport class PortfolioComponent {\n  projects: Project[] = [];\n  readonly filters: string[] = PROJECT_SKILLS;\n  readonly project_skills: Map<string, number[]> = project_skills;\n\n  filtered_projects: Project[] = [];\n  selected_filters: string[] = [];\n\n  constructor(private projectService: ProjectService) {}\n\n  ngOnInit(): void {\n    this.getProjects();\n    this.filtered_projects = this.projects;\n  }\n\n  private getProjects(): void {\n    this.projects = this.projectService.getProjects();\n  }\n\n  filter($event: string) {\n    let filtered_item: string = $event; //event emitted by filters component\n    console.log(filtered_item);\n    this.updateFilters(filtered_item);\n    this.updateFilteredProjects();\n  }\n\n  private updateFilters(filtered_item: string): void {\n    if (this.selected_filters.includes(filtered_item)) {\n      let index = this.selected_filters.indexOf(filtered_item);\n      this.selected_filters.splice(index, 1);\n    } else {\n      this.selected_filters.push(filtered_item);\n    }\n  }\n\n  private getVisibleProjects(): number[] {\n    let visible_projects: number[] = this.project_skills.get(this.selected_filters[0])!;\n    \n    for (let i = 1; i < this.selected_filters.length; i++){\n      let projects = this.project_skills.get(this.selected_filters[i])!;\n      visible_projects = visible_projects.filter(element => projects.includes(element));\n    }\n\n    return visible_projects;\n  }\n\n  private updateFilteredProjects(): void {\n    if (this.selected_filters.length == 0) {\n      this.filtered_projects = this.projects;\n    } else {\n      this.filtered_projects = [];\n      let projects: Set<number> = new Set(this.getVisibleProjects());\n  \n      for (let i = 0; i < this.projects.length; i++){\n        if (projects.has(this.projects[i].id)){\n          this.filtered_projects.push(this.projects[i]);\n        }\n      }\n    }\n  }\n\n}\n","<div class=\"container-body\">\n    <app-navbar></app-navbar>\n    <div class=\"container pt-5\"></div>\n    <app-filter (filter_item)=\"filter($event)\" [projects]=\"filtered_projects\" [filters]=\"filters\"></app-filter>\n    <app-portfolio-grid [projects]=\"filtered_projects\"></app-portfolio-grid>\n    <app-footer></app-footer>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}